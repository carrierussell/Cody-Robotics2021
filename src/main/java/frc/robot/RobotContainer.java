// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    private static ColorWheel m_colorWheel = new ColorWheel();
    private final Climber m_climber = new Climber();
    private final ShotMotor m_shotMotor = new ShotMotor();
    private static DriveTrain m_driveTrain = new DriveTrain();

// Joysticks
private final XboxController colorWheelClimber = new XboxController(1);
private final XboxController driveShoot = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("DriveForward", new DriveRobot());
    SmartDashboard.putData("ShootBall", new ShootBall());
    SmartDashboard.putData("Intake", new Intake());
    SmartDashboard.putData("ReverseIn", new ReverseIn());
    SmartDashboard.putData("ClimberUp", new ClimberUp());
    SmartDashboard.putData("ClimberDown", new ClimberDown());
    SmartDashboard.putData("WheelManual", new WheelManual());
    SmartDashboard.putData("WheelAuto", new WheelAuto());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton colorWheelAuto = new JoystickButton(colorWheelClimber, XboxController.Button.kA.value);        
colorWheelAuto.whenPressed(new WheelAuto() ,true);
    SmartDashboard.putData("ColorWheelAuto",new WheelAuto() );

final JoystickButton colorWheelManual = new JoystickButton(colorWheelClimber, XboxController.Button.kY.value);        
colorWheelManual.whileHeld(new WheelManual() ,true);
    SmartDashboard.putData("ColorWheelManual",new WheelManual() );

final JoystickButton retractClimber = new JoystickButton(colorWheelClimber, XboxController.Button.kB.value);        
retractClimber.whileHeld(new ClimberDown() ,true);
    SmartDashboard.putData("RetractClimber",new ClimberDown() );

final JoystickButton engageClimber = new JoystickButton(colorWheelClimber, XboxController.Button.kX.value);        
engageClimber.whileHeld(new ClimberUp() ,true);
    SmartDashboard.putData("EngageClimber",new ClimberUp() );

final JoystickButton reverseIntake = new JoystickButton(driveShoot, XboxController.Button.kB.value);        
reverseIntake.whileHeld(new ReverseIn() ,true);
    SmartDashboard.putData("Reverse Intake",new ReverseIn() );

final JoystickButton ballIntake = new JoystickButton(driveShoot, XboxController.Button.kX.value);        
ballIntake.whileHeld(new Intake(m_shotMotor) ,true);
    SmartDashboard.putData("Ball Intake",new Intake(m_shotMotor));

final JoystickButton shoot = new JoystickButton(driveShoot, XboxController.Button.kBumperLeft.value);        
shoot.whileHeld(new ShootBall() ,true);
    SmartDashboard.putData("Shoot",new ShootBall() );

final JoystickButton driveRight = new JoystickButton(driveShoot, XboxController.Button.kStickRight.value);        
driveRight.whenPressed(new DriveRobot(m_driveTrain) ,true);
    SmartDashboard.putData("DriveRight",new DriveRobot(m_driveTrain) );

final JoystickButton driveLeft = new JoystickButton(driveShoot, XboxController.Button.kStickLeft.value);        
driveLeft.whenPressed(new DriveRobot(m_driveTrain) ,true);
    SmartDashboard.putData("DriveLeft",new DriveRobot(m_driveTrain) );



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getDriveShoot() {
      return driveShoot;
    }

public XboxController getColorWheelClimber() {
      return colorWheelClimber;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

